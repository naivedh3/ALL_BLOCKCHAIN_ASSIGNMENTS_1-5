A-1// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Hello World Contract
/// @notice This contract returns a simple "Hello, World!" message.
contract HelloWorld {
    /// @notice Returns the string "Hello, World!"
    /// @return A string message "Hello, World!"
    function helloWorld() public pure returns (string memory) {
        return "Hello, World!";
    }
}

A-2// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Simple Storage Contract
/// @notice This contract allows storing and retrieving a single integer value.
contract SimpleStorage {
    uint private storedValue;

    /// @notice Stores a single integer value
    /// @param _value The value to be stored
    function setStoredValue(uint _value) public {
        storedValue = _value;
    }

    /// @notice Retrieves the stored integer value
    /// @return The stored integer value
    function getStoredValue() public view returns (uint) {
        return storedValue;
    }
}



A-3// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Greeting Contract
/// @notice This contract allows a user to set and get a personalized greeting message.
contract Greeting {
    string private greeting;

    /// @notice Sets a personalized greeting message
    /// @param _greeting The greeting message to be stored
    function setGreeting(string memory _greeting) public {
        greeting = _greeting;
    }

    /// @notice Retrieves the personalized greeting message
    /// @return The stored greeting message
    function getGreeting() public view returns (string memory) {
        return greeting;
    }
}

A-4// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Simple Counter Contract
/// @notice This contract keeps track of a count and allows it to be incremented.
contract SimpleCounter {
    uint private count;

    /// @notice Increments the counter by 1
    function incrementCount() public {
        count += 1;
    }

    /// @notice Retrieves the current count
    /// @return The current count value
    function getCount() public view returns (uint) {
        return count;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Name Storage Contract
/// @notice This contract allows storing and retrieving a user's name.
contract NameStorage {
    string private name;

    /// @notice Stores the user's name
    /// @param _name The name to be stored
    function setName(string memory _name) public {
        name = _name;
    }

    /// @notice Retrieves the stored name
    /// @return The stored name
    function getName() public view returns (string memory) {
        return name;
    }
}


A-5// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Basic Voting Contract
/// @notice This contract allows users to vote for a candidate and keeps track of votes.
contract BasicVoting {
    mapping(string => uint) private votes;

    /// @notice Vote for a candidate
    /// @param _candidate The candidate's name
    function vote(string memory _candidate) public {
        votes[_candidate] += 1;
    }

    /// @notice Retrieves the vote count for a candidate
    /// @param _candidate The candidate's name
    /// @return The vote count for the candidate
    function getVoteCount(string memory _candidate) public view returns (uint) {
        return votes[_candidate];
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Owner Access Contract
/// @notice This contract restricts certain functions to only the contract owner.
contract OwnerAccess {
    address private owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner!");
        _;
    }

    /// @notice Example function restricted to the contract owner
    function ownerOnlyFunction() public view onlyOwner returns (string memory) {
        return "This function can only be called by the owner.";
    }
}

A-6// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


/// @title Event Logging Contract
/// @notice This contract logs events when certain actions are performed.
contract EventLogging {
    event ActionPerformed(address indexed performer, string action);

    /// @notice Logs an action performed by the caller
    /// @param _action The action performed
    function logAction(string memory _action) public {
        emit ActionPerformed(msg.sender, _action);
    }
}

A-7// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title Simple Ledger Contract
/// @notice This contract maintains a ledger of transactions with basic entries.
contract SimpleLedger {
    struct Transaction {
        address from;
        address to;
        uint amount;
    }

    Transaction[] private transactions;

    /// @notice Adds a transaction to the ledger
    /// @param _to The recipient's address
    /// @param _amount The transaction amount
    function addTransaction(address _to, uint _amount) public {
        transactions.push(Transaction(msg.sender, _to, _amount));
    }

    /// @notice Retrieves a transaction by its index
    /// @param _index The index of the transaction
    /// @return The transaction details
    function getTransaction(uint _index) public view returns (address, address, uint) {
        Transaction memory txn = transactions[_index];
        return (txn.from, txn.to, txn.amount);
    }
}

